import os

from tracardi.domain.bridge import Bridge
from tracardi.service.plugin.domain.register import Form, FormGroup, FormField, FormComponent


_local_dir = os.path.dirname(__file__)

open_rest_source_bridge = Bridge(
    id="778ded05-4ff3-4e08-9a86-72c0195fa95d",
    type="rest",
    name="REST API Bridge",
    description="API /track collector",
    config={
        "static_profile_id": False
    },
    form=Form(groups=[
        FormGroup(
            name="REST API Bridge Configuration",
            fields=[
                FormField(
                    id="static_profile_id",
                    name="Allow static profile ID.",
                    description="This feature allows you to use profile IDs that were not generated by Tracardi. "
                                "The delivered profile ID will be used to create a non-existing profile ID. However, "
                                "please note that using this feature can pose a security risk. It's important to read "
                                "Tracardi documentation carefully before using it.",
                    component=FormComponent(type="bool", props={"label": "Allow static, remotely defined profile ID"})
                )
            ])
    ])
)

open_webhook_source_bridge = Bridge(
    id="3d8bb87e-28d1-4a38-b19c-d0c1fbb71e22",
    type="webhook",
    name="Webhook API Bridge",
    description="API Webhook collector",
    config={
        "sticky_session": True
    },
    form=Form(groups=[
        FormGroup(
            name="API Webhook Bridge Configuration",
            description="The webhook bridge usually collects data without connection to a profile or session. "
                        "But, if you need to make a profile and session for the data it collects, and you want "
                        "to make sure that it matches an existing profile, you should set up matching details below.",
            fields=[
                FormField(
                    id="generate_profile",
                    name="Create profile and session for collected data.",
                    description="By default, webhook events do not include session or profile IDs. "
                                "However, if you enable this settings, it will generate the profile and session "
                                "ID for this event.",

                    component=FormComponent(type="bool", props={"label": "Create profile and session"})
                )
            ]),
        FormGroup(
            name="Webhook event session management",
            fields=[
                FormField(
                    id="sticky_session",
                    name="Keep all webhook events in one profile session",
                    description="When enabled, every event gathered through this bridge will be stored in a single "
                                "session for each profile. Conversely, if not activated, each Webhook event will "
                                "be recorded in distinct sessions. This functionality is contingent on having the "
                                "[Create profile and session] feature active.",
                    component=FormComponent(
                        type="bool",
                        props={
                            "label": "Keep all webhook events in one profile session"
                        }
                    )
                )
            ])
    ])
)
with open(os.path.join(_local_dir, "manual/redirect_manual.md"), "r", encoding="utf-8") as fh:
    manual = fh.read()

redirect_bridge = Bridge(
    id='a495159f-91be-476d-a4e5-1b2d7e005403',
    type='redirect',
    name="Redirect URL Bridge",
    description="Redirects URLs and registers events.",
    manual=manual
)

os_default_bridges = [open_rest_source_bridge, open_webhook_source_bridge, redirect_bridge]
